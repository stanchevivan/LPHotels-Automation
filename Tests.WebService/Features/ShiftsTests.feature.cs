// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.WebService.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ShiftsTests")]
    public partial class ShiftsTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ShiftsTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ShiftsTests", "\tAs a user \r\n\tI want to be able to save and edit shifts\r\n\tso that I can create a " +
                    "schedule", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Shift")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("PostShiftModel")]
        [NUnit.Framework.TestCaseAttribute("1.InTeFutureWithBreaks", "15", "25", "2022-12-02 08:09", "2022-12-02 10:09", null)]
        [NUnit.Framework.TestCaseAttribute("2.WithoutBreaks", "0", "0", "2022-12-02 08:09", "2022-12-02 10:09", null)]
        [NUnit.Framework.TestCaseAttribute("3.ShiftInThePast", "15", "25", "2019-10-15 08:09", "2019-10-15 10:09", null)]
        public virtual void PostShift(string testCase, string break1Minutes, string break2Minutes, string startDateTime, string endDateTime, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateArea",
                    "CreateRole",
                    "CreateDepartment",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateMainAssignment",
                    "PostShiftModel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Shift", null, @__tags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/shifts/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table42.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table42.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
#line 17
  testRunner.And("the following url segments", ((string)(null)), table42, "And ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table43.AddRow(new string[] {
                            "Break1Minutes",
                            string.Format("{0}", break1Minutes)});
                table43.AddRow(new string[] {
                            "Break2Minutes",
                            string.Format("{0}", break2Minutes)});
                table43.AddRow(new string[] {
                            "StartDateTime",
                            string.Format("{0}", startDateTime)});
                table43.AddRow(new string[] {
                            "EndDateTime",
                            string.Format("{0}", endDateTime)});
#line 21
  testRunner.And("request has a shift as a body with parameters", ((string)(null)), table43, "And ");
#line hidden
#line 27
 testRunner.When("a POST request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("HTTP Code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
     testRunner.And("the shift is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create Shift endpoint should return error for incorrect dates")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("PostShiftModel")]
        [NUnit.Framework.TestCaseAttribute("2.WhenBreaksBiggerThenShift", "30", "30", "2025-12-07 01:09", "2025-12-07 02:00", "\"Shift must be longer than total break time added\"", "400", null)]
        [NUnit.Framework.TestCaseAttribute("3.WhenBreakBiggerThenShift", "0", "60", "2025-12-07 02:09", "2025-12-07 03:00", "\"Shift must be longer than total break time added\"", "400", null)]
        [NUnit.Framework.TestCaseAttribute("4.WhenShiftIsBeforeAssignmentStart", "15", "25", "2017-12-07 03:09", "2017-12-07 04:00", "\"The selected member of staff is not available for scheduling on this date\"", "400", null)]
        [NUnit.Framework.TestCaseAttribute("5.WhenShiftEndIsBeforeShiftStart", "15", "25", "2025-12-07 06:09", "2025-12-07 05:00", "\"Shift must be longer than total break time added\"", "400", null)]
        public virtual void CreateShiftEndpointShouldReturnErrorForIncorrectDates(string testCase, string break1Minutes, string break2Minutes, string startDateTime, string endDateTime, string errorMessage, string code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateArea",
                    "CreateRole",
                    "CreateDepartment",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateMainAssignment",
                    "PostShiftModel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Shift endpoint should return error for incorrect dates", null, @__tags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 96
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/shifts/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table44.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table44.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
#line 97
  testRunner.And("the following url segments", ((string)(null)), table44, "And ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table45.AddRow(new string[] {
                            "Break1Minutes",
                            string.Format("{0}", break1Minutes)});
                table45.AddRow(new string[] {
                            "Break2Minutes",
                            string.Format("{0}", break2Minutes)});
                table45.AddRow(new string[] {
                            "StartDateTime",
                            string.Format("{0}", startDateTime)});
                table45.AddRow(new string[] {
                            "EndDateTime",
                            string.Format("{0}", endDateTime)});
#line 101
  testRunner.And("request has a shift as a body with parameters", ((string)(null)), table45, "And ");
#line hidden
#line 107
 testRunner.When("a POST request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
 testRunner.Then(string.Format("HTTP Code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
     testRunner.And(string.Format("Error {0} should be returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Shift should return error when missing locationId, departmentId")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateLocations")]
        [NUnit.Framework.CategoryAttribute("LocationForAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateDepartmentAnotherLocationSameOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateDepartmentAnotherOrganisation")]
        [NUnit.Framework.TestCaseAttribute("1.MissingLocation", "", "$Department.ID", "404", null)]
        [NUnit.Framework.TestCaseAttribute("2.InvalidLocation", "123456", "$Department.ID", "401", null)]
        [NUnit.Framework.TestCaseAttribute("3.MissingDepartment", "$Location.ID", "", "404", null)]
        [NUnit.Framework.TestCaseAttribute("4.InvalidDepartment", "$Location.ID", "123456", "404", null)]
        [NUnit.Framework.TestCaseAttribute("5.DepartmentAnotherLocationSameOrganisation", "$Location.ID", "$DepartmentAnotherLocationSameOrganisation.ID", "401", null)]
        [NUnit.Framework.TestCaseAttribute("6.DepartmentAnotherOrganisation", "$Location.ID", "$DepartmentAnotherOrganisation.ID", "404", null)]
        [NUnit.Framework.TestCaseAttribute("7.DepartmentAnotherOrganisation", "$LocationAnotherOrganisation.ID", "$Department.ID", "401", null)]
        public virtual void PostShiftShouldReturnErrorWhenMissingLocationIdDepartmentId(string testCase, string locationId, string departmentId, string code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateLocations",
                    "LocationForAnotherOrganisation",
                    "CreateDepartment",
                    "CreateDepartmentAnotherLocationSameOrganisation",
                    "CreateDepartmentAnotherOrganisation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Shift should return error when missing locationId, departmentId", null, @__tags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 127
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/shifts/{id}/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table46.AddRow(new string[] {
                            "locationId",
                            string.Format("{0}", locationId)});
                table46.AddRow(new string[] {
                            "departmentId",
                            string.Format("{0}", departmentId)});
#line 128
     testRunner.And("the following url segments", ((string)(null)), table46, "And ");
#line hidden
#line 132
 testRunner.When("a DELETE request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
 testRunner.Then(string.Format("HTTP Code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post Shift endpoint should return error for overlaping shifts")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("PostShiftModel")]
        [NUnit.Framework.TestCaseAttribute("15", "25", "2025-11-17 08:09", "2025-11-17 10:09", "\"The shift could not be added because it overlaps with another\"", null)]
        public virtual void PostShiftEndpointShouldReturnErrorForOverlapingShifts(string break1Minutes, string break2Minutes, string startDateTime, string endDateTime, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateArea",
                    "CreateRole",
                    "CreateDepartment",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateMainAssignment",
                    "PostShiftModel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Shift endpoint should return error for overlaping shifts", null, @__tags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 155
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/shifts/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table47.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table47.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
#line 156
  testRunner.And("the following url segments", ((string)(null)), table47, "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table48.AddRow(new string[] {
                            "Break1Minutes",
                            string.Format("{0}", break1Minutes)});
                table48.AddRow(new string[] {
                            "Break2Minutes",
                            string.Format("{0}", break2Minutes)});
                table48.AddRow(new string[] {
                            "StartDateTime",
                            string.Format("{0}", startDateTime)});
                table48.AddRow(new string[] {
                            "EndDateTime",
                            string.Format("{0}", endDateTime)});
#line 160
  testRunner.And("request has a shift as a body with parameters", ((string)(null)), table48, "And ");
#line hidden
#line 166
 testRunner.When("a POST request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 167
 testRunner.Then("HTTP Code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table49.AddRow(new string[] {
                            "Break1Minutes",
                            string.Format("{0}", break1Minutes)});
                table49.AddRow(new string[] {
                            "Break2Minutes",
                            string.Format("{0}", break2Minutes)});
                table49.AddRow(new string[] {
                            "StartDateTime",
                            string.Format("{0}", startDateTime)});
                table49.AddRow(new string[] {
                            "EndDateTime",
                            string.Format("{0}", endDateTime)});
#line 168
     testRunner.And("request has a shift as a body with parameters", ((string)(null)), table49, "And ");
#line hidden
#line 174
     testRunner.And("a POST request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
 testRunner.Then("HTTP Code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
     testRunner.And(string.Format("Error {0} should be returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Shift")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("PostShiftModel")]
        [NUnit.Framework.CategoryAttribute("CreateShift")]
        [NUnit.Framework.TestCaseAttribute("1.InTeFutureWithBreaks", "15", "25", "2022-12-02 08:09", "2022-12-02 10:09", null)]
        [NUnit.Framework.TestCaseAttribute("2.WithoutBreaks", "0", "0", "2022-12-02 08:09", "2022-12-02 10:09", null)]
        [NUnit.Framework.TestCaseAttribute("3.ShiftInThePast", "15", "25", "2019-10-15 08:09", "2019-10-15 10:09", null)]
        public virtual void UpdateShift(string testCase, string break1Minutes, string break2Minutes, string startDateTime, string endDateTime, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateArea",
                    "CreateRole",
                    "CreateDepartment",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateMainAssignment",
                    "PostShiftModel",
                    "CreateShift"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Shift", null, @__tags);
#line 196
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 197
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/shifts/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table50.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table50.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
#line 198
  testRunner.And("the following url segments", ((string)(null)), table50, "And ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table51.AddRow(new string[] {
                            "Break1Minutes",
                            string.Format("{0}", break1Minutes)});
                table51.AddRow(new string[] {
                            "Break2Minutes",
                            string.Format("{0}", break2Minutes)});
                table51.AddRow(new string[] {
                            "StartDateTime",
                            string.Format("{0}", startDateTime)});
                table51.AddRow(new string[] {
                            "EndDateTime",
                            string.Format("{0}", endDateTime)});
                table51.AddRow(new string[] {
                            "Notes",
                            "updated"});
#line 202
  testRunner.And("request has a shift as a body to be updated", ((string)(null)), table51, "And ");
#line hidden
#line 209
 testRunner.When("a PUT request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 210
 testRunner.Then("HTTP Code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 211
     testRunner.And("the shift is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Shift endpoint should return error for incorrect dates")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("PostShiftModel")]
        [NUnit.Framework.CategoryAttribute("CreateShift")]
        [NUnit.Framework.TestCaseAttribute("2.WhenBreaksBiggerThenShift", "30", "30", "2025-12-07 01:09", "2025-12-07 02:00", "\"Shift must be longer than total break time added\"", "400", null)]
        [NUnit.Framework.TestCaseAttribute("3.WhenBreakBiggerThenShift", "0", "60", "2025-12-07 02:09", "2025-12-07 03:00", "\"Shift must be longer than total break time added\"", "400", null)]
        [NUnit.Framework.TestCaseAttribute("4.WhenShiftIsBeforeAssignmentStart", "15", "25", "2017-12-07 03:09", "2017-12-07 04:00", "\"The selected member of staff is not available for scheduling on this date\"", "200", null)]
        [NUnit.Framework.TestCaseAttribute("5.WhenShiftEndIsBeforeShiftStart", "15", "25", "2025-12-07 06:09", "2025-12-07 05:00", "\"Shift must be longer than total break time added\"", "400", null)]
        public virtual void UpdateShiftEndpointShouldReturnErrorForIncorrectDates(string testCase, string break1Minutes, string break2Minutes, string startDateTime, string endDateTime, string errorMessage, string code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateArea",
                    "CreateRole",
                    "CreateDepartment",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateMainAssignment",
                    "PostShiftModel",
                    "CreateShift"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Shift endpoint should return error for incorrect dates", null, @__tags);
#line 228
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 229
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/shifts/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table52.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table52.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
#line 230
  testRunner.And("the following url segments", ((string)(null)), table52, "And ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table53.AddRow(new string[] {
                            "Break1Minutes",
                            string.Format("{0}", break1Minutes)});
                table53.AddRow(new string[] {
                            "Break2Minutes",
                            string.Format("{0}", break2Minutes)});
                table53.AddRow(new string[] {
                            "StartDateTime",
                            string.Format("{0}", startDateTime)});
                table53.AddRow(new string[] {
                            "EndDateTime",
                            string.Format("{0}", endDateTime)});
                table53.AddRow(new string[] {
                            "Notes",
                            "updated"});
#line 234
  testRunner.And("request has a shift as a body to be updated", ((string)(null)), table53, "And ");
#line hidden
#line 241
 testRunner.When("a PUT request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 242
 testRunner.Then(string.Format("HTTP Code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 243
     testRunner.And("the shift is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Shift endpoint should return error when overlapping")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("PostShiftModel")]
        [NUnit.Framework.TestCaseAttribute("The shift could not be added because it overlaps with another", "400", null)]
        public virtual void UpdateShiftEndpointShouldReturnErrorWhenOverlapping(string errorMessage, string code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateArea",
                    "CreateRole",
                    "CreateDepartment",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateMainAssignment",
                    "PostShiftModel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Shift endpoint should return error when overlapping", null, @__tags);
#line 262
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table54.AddRow(new string[] {
                            "StartDateTime",
                            "2025-12-07 10:09"});
                table54.AddRow(new string[] {
                            "EndDateTime",
                            "2025-12-07 12:00"});
                table54.AddRow(new string[] {
                            "ChargedDate",
                            "2025-12-07"});
#line 263
    testRunner.Given("create and save shift in db", ((string)(null)), table54, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table55.AddRow(new string[] {
                            "StartDateTime",
                            "2025-12-07 16:09"});
                table55.AddRow(new string[] {
                            "EndDateTime",
                            "2025-12-07 20:00"});
                table55.AddRow(new string[] {
                            "ChargedDate",
                            "2025-12-07"});
#line 269
  testRunner.And("create and save shift in db", ((string)(null)), table55, "And ");
#line hidden
#line 275
     testRunner.And("the /locations/{locationId}/departments/{departmentId}/shifts/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table56.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table56.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
#line 276
  testRunner.And("the following url segments", ((string)(null)), table56, "And ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table57.AddRow(new string[] {
                            "StartDateTime",
                            "2025-12-07 10:09"});
                table57.AddRow(new string[] {
                            "EndDateTime",
                            "2025-12-07 12:00"});
                table57.AddRow(new string[] {
                            "Notes",
                            "updated"});
#line 280
  testRunner.And("request has a shift as a body to be updated", ((string)(null)), table57, "And ");
#line hidden
#line 285
 testRunner.When("a PUT request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 286
 testRunner.Then(string.Format("HTTP Code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 287
     testRunner.And(string.Format("Error {0} should be returned", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Shift should return error when missing locationId, departmentId")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateLocations")]
        [NUnit.Framework.CategoryAttribute("LocationForAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateDepartmentAnotherLocationSameOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateDepartmentAnotherOrganisation")]
        [NUnit.Framework.TestCaseAttribute("1.MissingLocation", "", "$Department.ID", "404", null)]
        [NUnit.Framework.TestCaseAttribute("2.InvalidLocation", "123456", "$Department.ID", "401", null)]
        [NUnit.Framework.TestCaseAttribute("3.MissingDepartment", "$Location.ID", "", "404", null)]
        [NUnit.Framework.TestCaseAttribute("4.InvalidDepartment", "$Location.ID", "123456", "404", null)]
        [NUnit.Framework.TestCaseAttribute("5.DepartmentAnotherLocationSameOrganisation", "$Location.ID", "$DepartmentAnotherLocationSameOrganisation.ID", "401", null)]
        [NUnit.Framework.TestCaseAttribute("6.DepartmentAnotherOrganisation", "$Location.ID", "$DepartmentAnotherOrganisation.ID", "404", null)]
        [NUnit.Framework.TestCaseAttribute("7.DepartmentAnotherOrganisation", "$LocationAnotherOrganisation.ID", "$Department.ID", "401", null)]
        public virtual void UpdateShiftShouldReturnErrorWhenMissingLocationIdDepartmentId(string testCase, string locationId, string departmentId, string code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateLocations",
                    "LocationForAnotherOrganisation",
                    "CreateDepartment",
                    "CreateDepartmentAnotherLocationSameOrganisation",
                    "CreateDepartmentAnotherOrganisation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Shift should return error when missing locationId, departmentId", null, @__tags);
#line 304
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 305
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/shifts/{id}/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table58.AddRow(new string[] {
                            "locationId",
                            string.Format("{0}", locationId)});
                table58.AddRow(new string[] {
                            "departmentId",
                            string.Format("{0}", departmentId)});
#line 306
     testRunner.And("the following url segments", ((string)(null)), table58, "And ");
#line hidden
#line 310
 testRunner.When("a PUT request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 311
 testRunner.Then(string.Format("HTTP Code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Shift")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("CreateShift")]
        [NUnit.Framework.CategoryAttribute("DeleteShiftModel")]
        [NUnit.Framework.TestCaseAttribute("$Employee.ID", null)]
        public virtual void DeleteShift(string employeeId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateArea",
                    "CreateRole",
                    "CreateDepartment",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateMainAssignment",
                    "CreateShift",
                    "DeleteShiftModel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Shift", null, @__tags);
#line 341
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 342
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/shifts/{id}/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table59.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table59.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
                table59.AddRow(new string[] {
                            "id",
                            "$Shift.ID"});
#line 343
     testRunner.And("the following url segments", ((string)(null)), table59, "And ");
#line hidden
#line 348
  testRunner.And("request has the following body", string.Format("{0}\r\n", employeeId), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 353
 testRunner.When("a DELETE request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 354
 testRunner.Then("HTTP Code is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 355
     testRunner.And("shift should be deleted from db", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Shift should return error when missing locationId, departmentId or shiftId" +
            "")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateLocations")]
        [NUnit.Framework.CategoryAttribute("CreateAreaAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("LocationForAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateRoleForAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateDepartmentAnotherLocationSameOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateDepartmentAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateAnotherOrganisationEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("MainAssignmentForEmployeeAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateShift")]
        [NUnit.Framework.TestCaseAttribute("1.MissingLocation", "", "$Department.ID", "$Shift.ID", "404", null)]
        [NUnit.Framework.TestCaseAttribute("2.InvalidLocation", "123456", "$Department.ID", "$Shift.ID", "401", null)]
        [NUnit.Framework.TestCaseAttribute("3.MissingDepartment", "$Location.ID", "", "$Shift.ID", "404", null)]
        [NUnit.Framework.TestCaseAttribute("4.InvalidDepartment", "$Location.ID", "123456", "$Shift.ID", "404", null)]
        [NUnit.Framework.TestCaseAttribute("5.DepartmentAnotherLocationSameOrganisation", "$Location.ID", "$DepartmentAnotherLocationSameOrganisation.ID", "$Shift.ID", "401", null)]
        [NUnit.Framework.TestCaseAttribute("6.DepartmentAnotherOrganisation", "$Location.ID", "$DepartmentAnotherOrganisation.ID", "$Shift.ID", "404", null)]
        [NUnit.Framework.TestCaseAttribute("7.DepartmentAnotherOrganisation", "$LocationAnotherOrganisation.ID", "$Department.ID", "$Shift.ID", "401", null)]
        public virtual void DeleteShiftShouldReturnErrorWhenMissingLocationIdDepartmentIdOrShiftId(string testCase, string locationId, string departmentId, string shiftId, string code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateLocations",
                    "CreateAreaAnotherOrganisation",
                    "LocationForAnotherOrganisation",
                    "CreateArea",
                    "CreateRole",
                    "CreateRoleForAnotherOrganisation",
                    "CreateDepartment",
                    "CreateDepartmentAnotherLocationSameOrganisation",
                    "CreateDepartmentAnotherOrganisation",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateAnotherOrganisationEmployee",
                    "CreateMainAssignment",
                    "MainAssignmentForEmployeeAnotherOrganisation",
                    "CreateShift"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Shift should return error when missing locationId, departmentId or shiftId" +
                    "", null, @__tags);
#line 377
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 378
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/shifts/{id}/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table60.AddRow(new string[] {
                            "locationId",
                            string.Format("{0}", locationId)});
                table60.AddRow(new string[] {
                            "departmentId",
                            string.Format("{0}", departmentId)});
                table60.AddRow(new string[] {
                            "id",
                            string.Format("{0}", shiftId)});
#line 379
     testRunner.And("the following url segments", ((string)(null)), table60, "And ");
#line hidden
#line 384
 testRunner.When("a DELETE request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 385
 testRunner.Then(string.Format("HTTP Code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Shift should return error when shiftId is incorrect")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateLocations")]
        [NUnit.Framework.CategoryAttribute("CreateAreaAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("LocationForAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateRoleForAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateDepartmentAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateAnotherDepartmentSameLocation")]
        [NUnit.Framework.CategoryAttribute("CreateDepartmentAnotherLocationSameOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateAnotherOrganisationEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("MainAssignmentForEmployeeAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateShift")]
        [NUnit.Framework.TestCaseAttribute("1.ShiftIsFromAnothrOgranisation", "locationAnotherOrganisation", "$ShiftLocationAnotherOrganisation.ID", "400", "Invalid request", null)]
        [NUnit.Framework.TestCaseAttribute("2.ShiftIsFromAnothrLocationSameOrganisation", "anotherLocationSameOrganisation", "$ShiftAnotherLocationSameOrganisation.ID", "400", "Invalid request", null)]
        [NUnit.Framework.TestCaseAttribute("3.ShiftIsFromSameLocationAnotherDepartment", "sameLocationAnotherDepartment", "$ShiftSameLocationAnotherDepartment.ID", "400", "Invalid request", null)]
        [NUnit.Framework.TestCaseAttribute("4.MissingShiftId", "", "", "405", "", null)]
        [NUnit.Framework.TestCaseAttribute("5.InvalidShiftId", "", "123456", "400", "Shift does not exist.", null)]
        public virtual void DeleteShiftShouldReturnErrorWhenShiftIdIsIncorrect(string testCase, string locationData, string shiftId, string code, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateLocations",
                    "CreateAreaAnotherOrganisation",
                    "LocationForAnotherOrganisation",
                    "CreateArea",
                    "CreateRole",
                    "CreateRoleForAnotherOrganisation",
                    "CreateDepartment",
                    "CreateDepartmentAnotherOrganisation",
                    "CreateAnotherDepartmentSameLocation",
                    "CreateDepartmentAnotherLocationSameOrganisation",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateAnotherOrganisationEmployee",
                    "CreateMainAssignment",
                    "MainAssignmentForEmployeeAnotherOrganisation",
                    "CreateShift"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Shift should return error when shiftId is incorrect", null, @__tags);
#line 414
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 415
testRunner.Given(string.Format("shift for depatment with {0} is created and saved into database", locationData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 416
     testRunner.And("the /locations/{locationId}/departments/{departmentId}/shifts/{id}/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table61.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table61.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
                table61.AddRow(new string[] {
                            "id",
                            string.Format("{0}", shiftId)});
#line 417
     testRunner.And("the following url segments", ((string)(null)), table61, "And ");
#line hidden
#line 422
 testRunner.When("a DELETE request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 423
 testRunner.Then(string.Format("HTTP Code is {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 424
     testRunner.And(string.Format("Error {0} should be returned", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Shift should return error when body is with incorrect EmployeeId")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateAreaAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("LocationForAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateRoleForAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateDepartmentAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateAnotherOrganisationEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        [NUnit.Framework.CategoryAttribute("MainAssignmentForEmployeeAnotherOrganisation")]
        [NUnit.Framework.CategoryAttribute("DeleteShiftModel")]
        [NUnit.Framework.TestCaseAttribute("1.MissingEmployeeId", "", "sameLocationSameOrganisation", "The request is invalid.", null)]
        [NUnit.Framework.TestCaseAttribute("2.EmployeeIdFromAnotherOrganisation", "EmployeeAnotherOrganisation", "sameLocationSameOrganisation", "The request is invalid.", null)]
        public virtual void DeleteShiftShouldReturnErrorWhenBodyIsWithIncorrectEmployeeId(string testCase, string employeeId, string locationAndOrganisation, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreateLocation",
                    "CreateAreaAnotherOrganisation",
                    "LocationForAnotherOrganisation",
                    "CreateArea",
                    "CreateRole",
                    "CreateRoleForAnotherOrganisation",
                    "CreateDepartment",
                    "CreateDepartmentAnotherOrganisation",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateAnotherOrganisationEmployee",
                    "CreateMainAssignment",
                    "MainAssignmentForEmployeeAnotherOrganisation",
                    "DeleteShiftModel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Shift should return error when body is with incorrect EmployeeId", null, @__tags);
#line 448
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 449
    testRunner.Given("shift for depatment with sameLocationSameOrganisation is created and saved into d" +
                        "atabase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 450
     testRunner.And("the /locations/{locationId}/departments/{departmentId}/shifts/{id}/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table62.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table62.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
                table62.AddRow(new string[] {
                            "id",
                            "$Shift.ID"});
#line 451
     testRunner.And("the following url segments", ((string)(null)), table62, "And ");
#line hidden
#line 456
     testRunner.And("request has the following body", string.Format("{0}\r\n", employeeId), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 461
 testRunner.When("a DELETE request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 462
 testRunner.Then("HTTP Code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 463
     testRunner.And(string.Format("Error {0} should be returned", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
