// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.WebService.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LabourDemandTests")]
    public partial class LabourDemandTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "LabourDemandTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LabourDemandTests", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Labour Demand")]
        [NUnit.Framework.CategoryAttribute("CreateLocation")]
        [NUnit.Framework.CategoryAttribute("CreateArea")]
        [NUnit.Framework.CategoryAttribute("CreateRole")]
        [NUnit.Framework.CategoryAttribute("CreateDepartment")]
        [NUnit.Framework.CategoryAttribute("CreateJobTitle")]
        [NUnit.Framework.CategoryAttribute("CreateEmployee")]
        [NUnit.Framework.CategoryAttribute("CreateEmployees")]
        [NUnit.Framework.CategoryAttribute("CreateMainAssignment")]
        public virtual void GetLabourDemand()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateLocation",
                    "CreateArea",
                    "CreateRole",
                    "CreateDepartment",
                    "CreateJobTitle",
                    "CreateEmployee",
                    "CreateEmployees",
                    "CreateMainAssignment"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Labour Demand", null, new string[] {
                        "CreateLocation",
                        "CreateArea",
                        "CreateRole",
                        "CreateDepartment",
                        "CreateJobTitle",
                        "CreateEmployee",
                        "CreateEmployees",
                        "CreateMainAssignment"});
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "Name",
                            "FirstSession"});
                table1.AddRow(new string[] {
                            "StartMins",
                            "300"});
                table1.AddRow(new string[] {
                            "EndMins",
                            "1020"});
#line 15
    testRunner.Given("create dailyPeriod", ((string)(null)), table1, "Given ");
#line hidden
#line 22
 testRunner.Given("the /locations/{locationId}/departments/{departmentId}/from/{from}/to/{to}/labour" +
                        "-demand/ resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table2.AddRow(new string[] {
                            "locationId",
                            "$Location.ID"});
                table2.AddRow(new string[] {
                            "departmentId",
                            "$Department.ID"});
                table2.AddRow(new string[] {
                            "from",
                            "2030-02-01"});
                table2.AddRow(new string[] {
                            "to",
                            "2030-02-02"});
#line 23
  testRunner.And("the following url segments", ((string)(null)), table2, "And ");
#line hidden
#line 30
 testRunner.When("a GET request is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
     testRunner.And("response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
