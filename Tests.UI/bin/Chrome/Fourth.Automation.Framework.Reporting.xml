<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fourth.Automation.Framework.Reporting</name>
    </assembly>
    <members>
        <member name="T:Fourth.Automation.Framework.Reporting.Configuration.Config">
            <summary>
            Configuration class to parse the configuration section
            </summary>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.Configuration.Config.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Fourth.Automation.Framework.Reporting.Configuration.Config"/> class.
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.Configuration.Config.Instance">
            <summary>
            Gets the framework configuration instance.
            </summary>
            <value>The configuration section instance.</value>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.Configuration.ReportSection">
            <summary>
             Represents the report section in the app config. The section should be 'report'
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.Configuration.ReportSection.ReportName">
            <summary>
            Gets the report name from the app.config
            Case no value, the default it 'report.json'
            </summary>
            <value>The type of the driver.</value>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.Configuration.ReportSection.FilePath">
            <summary>
            Gets the path where the report should be saved from the app.config
            Case not provided, the default value is **/bin/*/Reports
            </summary>
            <value>The type of the driver.</value>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.Converter">
            <summary>
            Converts the report from Specresults to a Cucumber Json file format supported by Jenkins
            </summary>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.Converter.ExecutionTime(SpecResults.Model.ReportItem)">
            <summary>
            Execution time for each step
            </summary>
            <param name="item">The step as ReportItem to return the execution time</param>
            <returns>Returns the converted time for each step</returns>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.Converter.ToJsonResult(SpecResults.Model.TestResult,SpecResults.Model.ExceptionInfo)">
            <summary>
            The result of the current step
            </summary>
            <param name="result">The step TestResult as extension</param>
            <param name="exception">Exception info</param>
            <returns>Returns the result value converted to the expected for the json file</returns>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.Converter.ToJenkinsJsonModel(SpecResults.Model.Report)">
            <summary>
            Extension for SpecResults.Report to converts it to a Json format
            </summary>
            <param name="specReport">The SpecResults.Report item</param>
            <returns>Returns the converted report</returns>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.Converter.CreateUndefinedStep">
            <summary>
            Create a Undefined step when one or more steps are not created on a Feature file
            </summary>
            <returns>Returns the step created</returns>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.BaseHooks">
            <summary>
            Provides methods to be executed before or after some of  the Specflow actions
            </summary>
        </member>
        <member name="F:Fourth.Automation.Framework.Reporting.BaseHooks.folderPath">
            <summary>
            The path to the report created.
            </summary>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.BaseHooks.CreateReport">
            <summary>
            Creates a report for the current test running
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel">
            <summary>
            Represents the Cucumber Report data model
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Report">
            <summary>
            Json Model
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Report.Features">
            <summary>
            Gets or sets list of Features ran by the test
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Tag">
            <summary>
            Represents a tag element of a report
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Tag.Name">
            <summary>
            Gets or sets the tag name
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Tag.Line">
            <summary>
            Gets or sets the line number
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Result">
            <summary>
            Represents a result element of a report
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Result.Duration">
            <summary>
            Gets or sets the duration of the result
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Result.Status">
            <summary>
            Gets or sets the status of the result
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Result.Error_message">
            <summary>
            Gets or sets the error message of the result
            Can also be used to log any kind of log (eg: trace, debug)
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Argument">
            <summary>
            Represent an Argument element of a report
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Argument.Val">
            <summary>
            Gets or sets the value of an argument
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Argument.Offset">
            <summary>
            Gets or sets the offset of an argument
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Match">
            <summary>
            Represents a Match element of a report
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Match.Location">
            <summary>
            Gets or sets the location of a match element
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Row">
            <summary>
            Represents a Row element of a report
            </summary>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.CucumberModel.Row.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fourth.Automation.Framework.Reporting.CucumberModel.Row"/> class.
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Row.Cells">
            <summary>
            Gets or sets a list of cells
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Row.Line">
            <summary>
             Gets or sets the line number
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Embedding">
            <summary>
            Represents an Embedding element of a report
            Use this one to add screenshots to a report step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Embedding.Mime_type">
            <summary>
             Gets or sets a mime type
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Embedding.Data">
            <summary>
             Gets or sets the data
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Step">
            <summary>
            Represents a Step element of a report
            </summary>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.CucumberModel.Step.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fourth.Automation.Framework.Reporting.CucumberModel.Step"/> class.
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.Keyword">
            <summary>
             Gets or sets a keyword for the step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.Name">
            <summary>
            Gets or sets a name for the step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.Result">
            <summary>
            Gets or sets a result for the step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.Match">
            <summary>
            Gets or sets a match for the step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.Arguments">
            <summary>
            Gets or sets a list of arguments for the step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.Line">
            <summary>
            Gets or sets a line number for the step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.IsBackground">
            <summary>
            Gets or sets a value indicating whether is a background step or not
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.Ticks">
            <summary>
            Gets or sets the number of ticks for the step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.Embeddings">
            <summary>
            Gets or sets the items to embed into reporting
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Step.Output">
            <summary>
            Gets or sets outputs to insert into report
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.After">
            <summary>
            Represents a After element of a report
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.After.Result">
            <summary>
            Gets or sets a result for the after step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.After.Match">
            <summary>
            Gets or sets a match for the after step
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Before">
            <summary>
            Represents a Before element of a report
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Before.Result">
            <summary>
            Gets or sets a result for the before step
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Before.Match">
            <summary>
            Gets or sets a match for the before step
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline">
            <summary>
            Represents a Scenario Outline for the report
            </summary>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline"/> class.
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline.Id">
            <summary>
            Gets or sets the Id of a Scenario Outline
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline.Keyword">
            <summary>
            Gets the Keyword of a Scenario Outline
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline.Name">
            <summary>
            Gets or sets the name of a Scenario Outline
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline.Steps">
            <summary>
            Gets or sets a list of steps of a Scenario Outline
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline.Tags">
            <summary>
            Gets or sets a list of tags of a Scenario Outline
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline.Type">
            <summary>
            Gets a type of a Scenario Outline
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.ScenarioOutline.Line">
            <summary>
            Gets or sets a line number of a Scenario Outline
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberModel.Feature">
            <summary>
            Represents a Feature element of a report
            </summary>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.CucumberModel.Feature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fourth.Automation.Framework.Reporting.CucumberModel.Feature"/> class.
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Feature.Elements">
            <summary>
            Gets or sets a list of elements of a Feature
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Feature.Id">
            <summary>
            Gets or sets a Id of a Feature
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Feature.Description">
            <summary>
            Gets or sets the Description of a Feature
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Feature.Keyword">
            <summary>
            Gets a Keyword of a Feature
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Feature.Name">
            <summary>
            Gets or sets a Name of a Feature
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Feature.Uri">
            <summary>
            Gets or sets a URI of a Feature
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Feature.Line">
            <summary>
            Gets or sets a Line of a Feature
            </summary>
        </member>
        <member name="P:Fourth.Automation.Framework.Reporting.CucumberModel.Feature.Tags">
            <summary>
            Gets or sets a list of Tags of a Feature
            </summary>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.CucumberFormatReport">
            <summary>
            Provides a Json report based on the SpecResults report
            </summary>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.CucumberFormatReport.WriteToStream(System.IO.Stream)">
            <summary>
            Wirte the report to a json file and serialize
            </summary>
            <param name="stream">stream as Stream</param>
        </member>
        <member name="T:Fourth.Automation.Framework.Reporting.LowercaseContractResolver">
            <summary>
            Provides contracts to resolve json properties
            </summary>
        </member>
        <member name="M:Fourth.Automation.Framework.Reporting.LowercaseContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Make the json property lower case
            </summary>
            <param name="propertyName">The property name to be resolved in lower case</param>
            <returns>Returns the specified json property in lower case format</returns>
        </member>
        <member name="T:SpecResults.EventArgs.ReportEventArgs">
            <summary>
            Create a event to the report
            </summary>
        </member>
        <member name="M:SpecResults.EventArgs.ReportEventArgs.#ctor(SpecResults.Reporter)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecResults.EventArgs.ReportEventArgs"/> class.
            </summary>
            <param name="reporter">The current report</param>
        </member>
        <member name="P:SpecResults.EventArgs.ReportEventArgs.Reporter">
            <summary>
            Gets the Reporter
            </summary>
        </member>
        <member name="P:SpecResults.EventArgs.ReportEventArgs.Report">
            <summary>
            Gets the Report
            </summary>
        </member>
        <member name="T:SpecResults.Extensions">
            <summary>
            Provides extensions methods to Report, Reporters, Feature and Scenario contexts.
            </summary>
        </member>
        <member name="M:SpecResults.Extensions.GetResult(System.Collections.Generic.IEnumerable{SpecResults.Model.ReportItem})">
            <summary>
            Gets and return the Test Result to a specified item
            </summary>
            <param name="items">Report Item </param>
            <returns>The TestResult to the specified item</returns>
        </member>
        <member name="M:SpecResults.Extensions.GetResult(System.Collections.Generic.IEnumerable{SpecResults.Model.TestResult})">
            <summary>
            Returns TestResult
            </summary>
            <param name="results">The result of your scenario</param>
            <returns>returns TestResult based on the received result</returns>
        </member>
        <member name="M:SpecResults.Extensions.GetPendingSteps(TechTalk.SpecFlow.ScenarioContext)">
            <summary>
            Find all steps that are pending on the specified Scenarion Context
            </summary>
            <param name="scenarioContenxt">Your current scenartionContext</param>
            <returns>A list of Pending Steps</returns>
        </member>
        <member name="M:SpecResults.Extensions.ToExceptionInfo(System.Exception)">
            <summary>
            Converts a Exception to a ExceptionInfo
            </summary>
            <param name="ex">Exception to convert</param>
            <returns>A ExceptionInfo object</returns>
        </member>
        <member name="M:SpecResults.Extensions.FindFeature(System.Collections.Generic.List{SpecResults.Model.Feature},TechTalk.SpecFlow.FeatureContext)">
            <summary>
            Finds Feature inside the Report
            </summary>
            <param name="self">The list of Features</param>
            <param name="context">Your current Feature Context</param>
            <returns>A Feature object</returns>
        </member>
        <member name="M:SpecResults.Extensions.FindScenario(System.Collections.Generic.List{SpecResults.Model.Scenario},TechTalk.SpecFlow.ScenarioContext)">
            <summary>
            Finds Scenario inside the Report
            </summary>
            <param name="self">The list of Scenario</param>
            <param name="context">Your current Scenario Context</param>
            <returns>A Scenario object</returns>
        </member>
        <member name="M:SpecResults.Extensions.FindFeature(SpecResults.Reporter,TechTalk.SpecFlow.FeatureContext)">
            <summary>
            Finds Feature inside the Report
            </summary>
            <param name="self">The Reporter object holding your features</param>
            <param name="context">Your current Feature Context</param>
            <returns>A Feature object</returns>
        </member>
        <member name="M:SpecResults.Extensions.FindFeature(System.Collections.Generic.List{SpecResults.Model.Feature},System.String)">
            <summary>
            Finds Feature inside the Report based by title
            </summary>
            <param name="self">The list of Features</param>
            <param name="title">The feature title to be used as search paramaeter</param>
            <returns>A Feature object</returns>
        </member>
        <member name="M:SpecResults.Extensions.FindFeature(SpecResults.Model.Report,TechTalk.SpecFlow.FeatureContext)">
            <summary>
            Finds Feature inside the Report
            </summary>
            <param name="self">The Report object holding your list of Features</param>
            <param name="context">Your current Feature Context</param>
            <returns>A Feature object</returns>
        </member>
        <member name="M:SpecResults.Extensions.FindScenario(SpecResults.Model.Feature,TechTalk.SpecFlow.ScenarioContext)">
            <summary>
            Finds a Scenario inside the Report
            </summary>
            <param name="self">A Feature object holding your list of scenarios</param>
            <param name="context">Your current Scenario Context</param>
            <returns>A Scenario object</returns>
        </member>
        <member name="M:SpecResults.Extensions.FindScenarioBlock(SpecResults.Model.Feature,TechTalk.SpecFlow.ScenarioContext)">
            <summary>
            Finds a Scenario Block inside the Report
            </summary>
            <param name="self">Feature object</param>
            <param name="context">Your current Scenario Context</param>
            <returns>A ScenarioBlock object</returns>
        </member>
        <member name="M:SpecResults.Extensions.FindStep(System.Collections.Generic.List{SpecResults.Model.Step},TechTalk.SpecFlow.ScenarioContext)">
            <summary>
            Finds Step inside the a Report
            </summary>
            <param name="self">The list of Steps</param>
            <param name="context">YOur current Scenario Context</param>
            <returns>A Step object</returns>
        </member>
        <member name="T:SpecResults.Model.ExceptionInfo">
            <summary>
            Contains the information about an <see cref="T:System.Exception" />.
            </summary>
            <remarks>
            Exceptions are not serializable to xml, due to the
            IDictionary Data property. That's why this class is used
            </remarks>
        </member>
        <member name="M:SpecResults.Model.ExceptionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecResults.Model.ExceptionInfo"/> class.
            </summary>
        </member>
        <member name="M:SpecResults.Model.ExceptionInfo.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecResults.Model.ExceptionInfo"/> class.
            </summary>
            <param name="ex">A Exception object to be converted</param>
        </member>
        <member name="P:SpecResults.Model.ExceptionInfo.ExceptionType">
            <summary>
            Gets or sets a Exception Type to the Exception
            </summary>
        </member>
        <member name="P:SpecResults.Model.ExceptionInfo.HelpLink">
            <summary>
            Gets or sets a Help Link to the Exception
            </summary>
        </member>
        <member name="P:SpecResults.Model.ExceptionInfo.InnerException">
            <summary>
            Gets or sets a Inner Exception to the Exception
            </summary>
        </member>
        <member name="P:SpecResults.Model.ExceptionInfo.Message">
            <summary>
            Gets or sets a Message to the Exception
            </summary>
        </member>
        <member name="P:SpecResults.Model.ExceptionInfo.Source">
            <summary>
            Gets or sets a Source to the Exception
            </summary>
        </member>
        <member name="P:SpecResults.Model.ExceptionInfo.StackTrace">
            <summary>
            Gets or sets a Stack Trace to the Exception
            </summary>
        </member>
        <member name="T:SpecResults.Model.Feature">
            <summary>
            Represents a Feature element based on Specflow Features
            </summary>
        </member>
        <member name="P:SpecResults.Model.Feature.Description">
            <summary>
            Gets or sets a Feature Description
            </summary>
        </member>
        <member name="P:SpecResults.Model.Feature.Scenarios">
            <summary>
            Gets or sets a List of scenarios inside the Feature
            </summary>
        </member>
        <member name="P:SpecResults.Model.Feature.Result">
            <summary>
            Gets the result of a Feature
            </summary>
        </member>
        <member name="T:SpecResults.Model.Report">
            <summary>
            Provides a Report object to add executed Featured from Specflow
            </summary>
        </member>
        <member name="P:SpecResults.Model.Report.Generator">
            <summary>
            Gets or sets a Generator to the Report
            </summary>
        </member>
        <member name="P:SpecResults.Model.Report.Features">
            <summary>
            Gets or sets a List of Features to the Report
            </summary>
        </member>
        <member name="P:SpecResults.Model.Report.Result">
            <summary>
            Gets a Test Result to the Report
            </summary>
        </member>
        <member name="T:SpecResults.Model.ReportItem">
            <summary>
            Represents a Report Item to be used as based to the main elements of a Report
            </summary>
        </member>
        <member name="P:SpecResults.Model.ReportItem.Title">
            <summary>
            Gets or sets a Title
            </summary>
        </member>
        <member name="P:SpecResults.Model.ReportItem.StartTime">
            <summary>
            Gets or sets a Start Time
            </summary>
        </member>
        <member name="P:SpecResults.Model.ReportItem.EndTime">
            <summary>
            Gets or sets a End Time
            </summary>
        </member>
        <member name="P:SpecResults.Model.ReportItem.UserData">
            <summary>
            Gets or sets a User Data
            </summary>
        </member>
        <member name="P:SpecResults.Model.ReportItem.GeneratorData">
            <summary>
            Gets or sets a Generator Data
            </summary>
        </member>
        <member name="P:SpecResults.Model.ReportItem.Result">
            <summary>
            Gets or sets a result
            </summary>
        </member>
        <member name="T:SpecResults.Model.Scenario">
            <summary>
            Represents a Scenario element based on Specflow Scenarios
            </summary>
        </member>
        <member name="P:SpecResults.Model.Scenario.Given">
            <summary>
            Gets or sets a Given Scenario Block
            </summary>
        </member>
        <member name="P:SpecResults.Model.Scenario.When">
            <summary>
            Gets or sets a When Scenario Block
            </summary>
        </member>
        <member name="P:SpecResults.Model.Scenario.Then">
            <summary>
            Gets or sets a Then Scenario Block
            </summary>
        </member>
        <member name="P:SpecResults.Model.Scenario.Result">
            <summary>
            Gets the result of the Scenario
            </summary>
        </member>
        <member name="T:SpecResults.Model.ScenarioBlock">
            <summary>
            Represents a Scenario Block based on Specflow Scenario Blocks
            </summary>
        </member>
        <member name="P:SpecResults.Model.ScenarioBlock.Result">
            <summary>
            Gets the result of the Scenario Block
            </summary>
        </member>
        <member name="T:SpecResults.Model.Step">
            <summary>
            Represents a Step based on Specflow Steps
            </summary>
        </member>
        <member name="M:SpecResults.Model.Step.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecResults.Model.Step"/> class.
            </summary>
        </member>
        <member name="P:SpecResults.Model.Step.Steps">
            <summary>
            Gets or sets a List of Steps
            </summary>
        </member>
        <member name="P:SpecResults.Model.Step.Exception">
            <summary>
            Gets or sets a Exception for the Step
            </summary>
        </member>
        <member name="P:SpecResults.Model.Step.IsBackground">
            <summary>
            Gets or sets a value indicating whether a Step is a Background Step
            </summary>
        </member>
        <member name="P:SpecResults.Model.Step.ScreenshotsData">
            <summary>
            Gets or sets a List of Screenshots for the Step
            </summary>
        </member>
        <member name="P:SpecResults.Model.Step.OutputMessages">
            <summary>
            Gets or sets a list of Output messages for the Step
            </summary>
        </member>
        <member name="T:SpecResults.Model.TaggedReportItem">
            <summary>
            Represents a tag element that can be used either on a Feature or Scenario
            </summary>
        </member>
        <member name="P:SpecResults.Model.TaggedReportItem.Tags">
            <summary>
            Gets or sets a list of tags
            </summary>
        </member>
        <member name="T:SpecResults.Model.TestResult">
            <summary>
            Represents a list of possible Test Results
            </summary>
        </member>
        <member name="F:SpecResults.Model.TestResult.Unknown">
            <summary>
            Represents an Unknown Test Result
            </summary>
        </member>
        <member name="F:SpecResults.Model.TestResult.OK">
            <summary>
            Represents a Positive Test Result
            </summary>
        </member>
        <member name="F:SpecResults.Model.TestResult.Error">
            <summary>
            Represents a Failed Test Result
            </summary>
        </member>
        <member name="F:SpecResults.Model.TestResult.NotRun">
            <summary>
            Represents a not run Test Result
            </summary>
        </member>
        <member name="F:SpecResults.Model.TestResult.Pending">
            <summary>
            Represents a Pending Test Result
            </summary>
        </member>
        <member name="F:SpecResults.Model.TestResult.Undefined">
            <summary>
            Represents a Undefined Test Result
            </summary>
        </member>
        <member name="T:SpecResults.Reporter">
            <summary>
            Base class for reporter implementations
            </summary>
        </member>
        <member name="P:SpecResults.Reporter.Name">
            <summary>
            Gets a Name to the report
            </summary>
        </member>
        <member name="P:SpecResults.Reporter.Report">
            <summary>
            Gets or sets the report
            </summary>
        </member>
        <member name="M:SpecResults.Reporter.WriteToStream(System.IO.Stream)">
            <summary>
            Writes a stream
            </summary>
            <param name="stream">The stream to write</param>
        </member>
        <member name="M:SpecResults.Reporter.WriteToFile(System.String)">
            <summary>
                Serializes this reporter's report to the given <paramref name="path" />
            </summary>
            <param name="path">The path to store the file</param>
        </member>
        <member name="T:SpecResults.Reporters">
            <summary>
            Partial class for Reporters. Represents the main methods and structures
            </summary>
            <summary>
            Partial class for Reporters. Represents the events used during the report creation
            </summary>
            <summary>
            Partial class for Reporters. Represents the hooks to be executed during a Specflow scenarios run
            </summary>
        </member>
        <member name="P:SpecResults.Reporters.Reporter">
            <summary>
            Gets or sets a Reporter
            </summary>
        </member>
        <member name="P:SpecResults.Reporters.FixedRunTime">
            <summary>
            Gets or sets a Fixed Run Time
            </summary>
        </member>
        <member name="P:SpecResults.Reporters.CurrentRunTime">
            <summary>
            Gets the current time
            </summary>
        </member>
        <member name="M:SpecResults.Reporters.CreateStep(System.DateTime)">
            <summary>
            Creates a Step object based on the current step been executed
            </summary>
            <param name="starttime">The start time</param>
            <returns>Returns a Step object containing information regarding the current Step executing</returns>
        </member>
        <member name="M:SpecResults.Reporters.GetProperty(System.String)">
            <summary>
            Extracts hidden properties of a scenario context
            </summary>
            <param name="propertyName">The property to be extracted</param>
            <returns>Returns a string represeting the extracted property</returns>
        </member>
        <member name="E:SpecResults.Reporters.StartedReport">
            <summary>
            A Event Handler that represents when a Report has Started
            </summary>
        </member>
        <member name="E:SpecResults.Reporters.FinishedReport">
            <summary>
            A Event Handler that represents when a Report has Finished
            </summary>
        </member>
        <member name="M:SpecResults.Reporters.OnStartedReport(SpecResults.Reporter)">
            <summary>
            Raise a event to when a report has started
            </summary>
            <param name="reporter">The reporter object to register</param>
        </member>
        <member name="M:SpecResults.Reporters.OnFinishedReport(SpecResults.Reporter)">
            <summary>
            Raise a event to when a report has ended
            </summary>
            <param name="reporter">The reporter object to register</param>
        </member>
        <member name="M:SpecResults.Reporters.RaiseEvent``1(System.EventHandler{``0},``0)">
            <summary>
            Raise Events
            </summary>
            <typeparam name="T">Type of event</typeparam>
            <param name="handler">Handler to raise</param>
            <param name="args">Args to the event</param>
        </member>
        <member name="M:SpecResults.Reporters.#ctor(TechTalk.SpecFlow.FeatureContext,TechTalk.SpecFlow.ScenarioContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecResults.Reporters"/> class.
            </summary>
            <param name="featureContext">The current Feature context</param>
            <param name="scenarioContext">The current Scenario context</param>
        </member>
        <member name="M:SpecResults.Reporters.BeforeTestRun">
            <summary>
            Specflow Hook Before Test Run
            </summary>
        </member>
        <member name="M:SpecResults.Reporters.BeforeFeature(TechTalk.SpecFlow.FeatureContext)">
            <summary>
            Specflow Hook Before Feature
            </summary>
            <param name="featureContext">The current Feature context</param>
        </member>
        <member name="M:SpecResults.Reporters.AfterFeature(TechTalk.SpecFlow.FeatureContext)">
            <summary>
            Specflow Hook After Feature
            </summary>
            <param name="featureContext">The current Feature context</param>
        </member>
        <member name="M:SpecResults.Reporters.AfterTestRun">
            <summary>
            Specflow Hook After Test Run
            </summary>
        </member>
        <member name="M:SpecResults.Reporters.BeforeScenario">
            <summary>
            Specflow Hook Before Scenario
            </summary>
        </member>
        <member name="M:SpecResults.Reporters.BeforeScenarioBlock">
            <summary>
            Specflow Hook Before Scenario Block
            </summary>
        </member>
        <member name="M:SpecResults.Reporters.BeforeStep">
            <summary>
            Specflow Hook Before Step
            </summary>
        </member>
        <member name="M:SpecResults.Reporters.AfterStep">
            <summary>
            Specflow Hook After Step
            </summary>
        </member>
        <member name="M:SpecResults.Reporters.AfterScenarioBlock">
            <summary>
            Specflow Hook After Scenario Block
            </summary>
        </member>
        <member name="M:SpecResults.Reporters.AfterScenario">
            <summary>
            Specflow Hook After Scenario
            </summary>
        </member>
        <member name="T:SpecResults.Support">
            <summary>
            Provides support methods to help build reports
            </summary>
        </member>
        <member name="M:SpecResults.Support.GetConfigurationName">
            <summary>
            Gets the configuration name based on the Base Directory method
            </summary>
            <returns>Returns a string with the name of the App Config</returns>
        </member>
    </members>
</doc>
